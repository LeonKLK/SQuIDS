#include <iostream>
#include <SQuIDs/SUNalg.h>
#include <iostream>


int main(){
  using squids::SU_vector;
  
  gsl_matrix_complex *mb=gsl_matrix_complex_alloc(2,2);
  gsl_matrix_complex *mb2=gsl_matrix_complex_alloc(2,2);

  gsl_complex z00, z01, z10, z11;
  GSL_SET_COMPLEX(&z00, 0, 0); GSL_SET_COMPLEX(&z01, 0, 1);
  GSL_SET_COMPLEX(&z10, 0, 1
		  ); GSL_SET_COMPLEX(&z11, 1, 0);

  gsl_complex zt00, zt01, zt10, zt11;
  GSL_SET_COMPLEX(&zt00, 1, 0); GSL_SET_COMPLEX(&zt01, 0, 1);
  GSL_SET_COMPLEX(&zt10, 1, 0); GSL_SET_COMPLEX(&zt11, 1, 0);

  
  //gsl_matrix_complex_set(m,0,0,z00); gsl_matrix_complex_set(m,0,1,z01);
  //gsl_matrix_complex_set(m,1,0,z10); gsl_matrix_complex_set(m,1,1,z11);

  gsl_matrix_complex_set(mb,0,0,zt00); gsl_matrix_complex_set(mb,0,1,zt01);
  gsl_matrix_complex_set(mb,1,0,zt10); gsl_matrix_complex_set(mb,1,1,zt11);

  //gsl_matrix_complex_set(mb2,0,0,zt00); gsl_matrix_complex_set(mb2,0,1,zt01);
  //gsl_matrix_complex_set(mb2,1,0,zt10); gsl_matrix_complex_set(mb2,1,1,zt11);

  
  //SU_vector v1(mb);
  //SU_vector v2(m);

  
  //gsl_complex_matrix_exponential(em, m, 2);
  
  
  //gsl_matrix_complex_change_basis_UCMU(em, mb);
  
  for (size_t i = 0; i < mb->size1; i++) {
    for (size_t j = 0; j < mb->size2; j++) {
      std::cout << GSL_REAL(gsl_matrix_complex_get(mb, i, j))
		<< "  " << GSL_IMAG(gsl_matrix_complex_get(mb, i, j))  << "  \t "; 
    }
    std::cout << std::endl;
  }

  
  SU_vector v3(mb);
  auto m3=v3.GetGSLMatrix();
  
  
  for (size_t i = 0; i < mb->size1; i++) {
    for (size_t j = 0; j < mb->size2; j++) {
      std::cout << GSL_REAL(gsl_matrix_complex_get(m3.get(), i, j))
		<< "  " << GSL_IMAG(gsl_matrix_complex_get(m3.get(), i, j))  << "  \t "; 
    }
    std::cout << std::endl;
  }
  
   

  return(0);
}
